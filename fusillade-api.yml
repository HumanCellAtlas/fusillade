openapi: 3.0.0
info:
  title: Fusillade app demo
  description: |
    Human Cell Atlas Data Coordination Platform Fusillade app demo

    Log in: [Auth0](/login?state=ABC&redirect_uri=https://$API_DOMAIN_NAME/internal/echo)

    OIDC spec https://openid.net/specs/openid-connect-core-1_0.html#toc

    # Pagination
    The Fusillade API supports pagination in a manner consistent with the
    [GitHub API](https://developer.github.com/v3/guides/traversing-with-pagination/),
    which is based on [RFC 5988](https://tools.ietf.org/html/rfc5988). When the results of an API call exceed the
    page size specified, the HTTP response will contain a `Link` header of the following form:
    `Link: <https://dss.data.humancellatlas.org/v1/search?replica=aws&per_page=100&search_after=123>; rel="next"`.
    The URL in the header refers to the next page of the results to be fetched; if no `Link rel="next"` URL is
    included, then all results have been fetched. The client should recognize and parse the `Link` header
    appropriately according to RFC 5988, and retrieve the next page if requested by the user, or if all results
    are being retrieved.

  version: "0.0.1"
servers:
  - url: https://$API_DOMAIN_NAME
paths:
  /login:
    get:
      summary: Send the user agent to an identity provider selector and generate a user account. This is redirect
       endpoint.
      operationId: fusillade.api.oauth.login
      tags:
        - oauth
      parameters:
        - name: redirect_uri
          description: where to redirect to once login is complete
          in: query
          required: true
          schema:
            type: string
        - name: state
          description: an opaque paramater that is returned back to the redirect_uri
          in: query
          schema:
            type: string
      responses:
        301:
          description: OK
        default:
          description: Unexpected error
  /.well-known/openid-configuration:
    get:
      summary: This endpoint is part of OIDC see documentation
       https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig
      tags:
        - oauth
      parameters:
        - in: header
          name: host
          schema:
            type: string
          required: true
          description: Must be $API_DOMAIN_NAME
      operationId: fusillade.api.oauth.serve_openid_config
      responses:
        200:
          description: Returns the supported openid endpoints
  /.well-known/jwks.json:
    get:
      summary: This endpoint is part of OIDC
      tags:
        - oauth
      operationId: fusillade.api.oauth.serve_jwks_json
      responses:
        200:
          description: Returns the well known jwks
  /oauth/authorize:
    get:
      summary: This endpoint is part of OIDC and is used to redirect to an openid provider
       see https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
      operationId: fusillade.api.oauth.authorize
      tags:
        - oauth
      parameters:
        - name: redirect_uri
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: client_id
          in: query
          schema:
            type: string
        - name: scope
          in: query
          schema:
            type: string
        - name: respone_type
          in: query
          schema:
            type: string
      responses:
        302:
          description: redirecting to authentication server
          headers:
            Location:
              schema:
                type: string
        default:
          description: Unexpected error
  /oauth/token:
    post:
      summary: This endpoint is part of OIDC and is used to redirect to an openid provider
        see https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint, and
        https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens
      operationId: fusillade.api.oauth.serve_oauth_token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                redirect_uri:
                  description: where to redirect to once login is complete
                  type: string
                code:
                  description: the code used to retrive an access token from OIDC authentication flow.
                  type: string
                grant_type:
                  description: the type of grant requested.
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
                refresh_token:
                  type: string
                scope:
                  type: string

      tags:
        - oauth
      responses:
        302:
          description: OK
          headers:
            Cache-Control:
              schema:
                type: string
            Pragma:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        default:
          description: Unexpected error
  /oauth/userinfo:
    get:
      summary: This endpoint is part of OIDC and is used to redirect to an openid provider
        see https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
      operationId: fusillade.api.oauth.get_userinfo
      security:
        - BearerAuth: []
      tags:
        - oauth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/401'
    post:
      summary: This endpoint is part of OIDC and is used to redirect to an openid provider
        see https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
      operationId: fusillade.api.oauth.post_userinfo
      security:
        - BearerAuth: []
      tags:
        - oauth
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/401'
  /echo:
    get:
      summary: echos the response
      operationId: fusillade.api.internal.echo
      responses:
        200:
          description: echo
  /v1/policies/evaluate:
    post:
      summary: Given a set of principals, actions, and resources return a set of access control decisions.
      operationId: fusillade.api.evaluate.evaluate_policy_api
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - principal
                - action
                - resource
              type: object
              properties:
                principal:
                  description: Attested user identifier
                  type: string
                action:
                  description: The action the principal is attempting to perform
                  type: array
                  items:
                    type: string
                resource:
                  description: The resource the principal will perform the action against
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: The result of the policy evaluation
          content:
            application/json:
              schema:
                type: object
                properties:
                  decision:
                    type: boolean
        default:
          description: Unexpected error
  /v1/users:
    get:
      summary: List users
      operationId: fusillade.api.users.get_users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: all users have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - user
    put:
      summary: Create a new user
      operationId: fusillade.api.users.put_new_user
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - user_id
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/custom_identifier'
                groups:
                  type: array
                  items:
                    $ref: '#/components/schemas/custom_identifier'
                roles:
                  type: array
                  items:
                    $ref: '#/components/schemas/custom_identifier'
                policy:
                  type: string
      tags:
        - user
      responses:
        201:
          description: User was created
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
  /v1/users/{user_id}:
    get:
      summary: Retrieve information about a user's status
      operationId: fusillade.api.users.get_user
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
      tags:
        - user
      responses:
        200:
          description: Information about the user is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
    put:
      summary: Modify the users status
      operationId: fusillade.api.users.put_user
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/status'
      tags:
        - user
      responses:
        200:
          description: Status set
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
  /v1/users/{user_id}/groups:
    get:
      summary: Retrieve group(s) a user is in.
      operationId: fusillade.api.users.get_users_groups
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      tags:
        - user
      responses:
        200:
          description: all groups have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
    put:
      summary: Add or remove a user from group(s)
      operationId: fusillade.api.users.put_users_groups
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/action'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groups:
                  type: array
                  items:
                    type: string
      tags:
        - user
      responses:
        200:
          description: Action successful
        401:
          $ref: '#/components/responses/401'
        304:
          description: The user is already a part of the group
        default:
          description: Unexpected error
  /v1/users/{user_id}/roles:
    get:
      summary: Retrieve roles a user is in.
      operationId: fusillade.api.users.get_users_roles
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      tags:
        - user
      responses:
        200:
          description: all roles have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
    put:
      summary: Add or remove user from role(s)
      operationId: fusillade.api.users.put_users_roles
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/action'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
      tags:
        - user
      responses:
        200:
          description: Action successful
        401:
          $ref: '#/components/responses/401'
        304:
          description: The user is already apart of the role
        default:
          description: Unexpected error
  /v1/users/{user_id}/policy:
    put:
      summary: Modify policy
      operationId: fusillade.api.users.put_user_policy
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  type: string
      responses:
        200:
          description: policy modified
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
      tags:
        - user
  /v1/groups:
    get:
      summary: List groups
      operationId: fusillade.api.groups.get_groups
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: all groups have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - group
    put:
      summary: Create a new group
      operationId: fusillade.api.groups.put_new_group
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - group_id
              properties:
                group_id:
                  $ref: '#/components/schemas/custom_identifier'
                policy:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Group was created
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
      tags:
        - group
  /v1/groups/{group_id}:
    get:
      summary: Get properties of a group
      operationId: fusillade.api.groups.get_group
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Information about the group is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - group
    delete:
      summary: Remove Group from the system.
      operationId: fusillade.api.groups.delete_group
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Group was deleted
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
      tags:
        - group
  /v1/groups/{group_id}/roles:
    get:
      summary: Retrieve role(s) a group is in.
      operationId: fusillade.api.groups.get_groups_roles
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: all roles have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - group
    put:
      summary: Add or remove a group from role(s).
      operationId: fusillade.api.groups.put_groups_roles
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/action'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Action successful
        401:
          $ref: '#/components/responses/401'
        304:
          description: The group is already apart of the role
        default:
          description: Unexpected error
      tags:
        - group
  /v1/groups/{group_id}/users:
    get:
      summary: Retrieve user in a group.
      operationId: fusillade.api.groups.get_group_users
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: all users have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - group
  /v1/groups/{group_id}/policy:
    put:
      summary: Modify policy
      operationId: fusillade.api.groups.put_group_policy
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  type: string
      responses:
        200:
          description: policy modified
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
      tags:
        - group
  /v1/roles:
    get:
      summary: List roles
      operationId: fusillade.api.roles.get_roles
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/next_token'
        - $ref: '#/components/parameters/per_page'
      responses:
        200:
          description: all roles have been returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        206:
          $ref: '#/components/responses/206'
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    $ref: '#/components/schemas/paged_results'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - role
    put:
      summary: Create a new role
      operationId: fusillade.api.roles.put_new_role
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - role_id
                - policy
              properties:
                role_id:
                  $ref: '#/components/schemas/custom_identifier'
                policy:
                  type: string
      responses:
        201:
          description: Role was created
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        default:
          description: Unexpected error
      tags:
        - role
  /v1/roles/{role_id}:
    get:
      summary: Get properties of a role
      operationId: fusillade.api.roles.get_role
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/role_id'
      responses:
        200:
          description: Information about the role is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          $ref: '#/components/responses/404'
        default:
          description: Unexpected error
      tags:
        - role
  /v1/roles/{role_id}/policy:
    put:
      summary: Modify policy
      operationId: fusillade.api.roles.put_role_policy
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/role_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                policy:
                  type: string
      responses:
        200:
          description: policy modified
        401:
          $ref: '#/components/responses/401'
        default:
          description: Unexpected error
      tags:
        - role
components:
  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      description: User ID (email)
      schema:
        $ref: '#/components/schemas/custom_identifier'
    role_id:
      name: role_id
      in: path
      description: The name of the role
      required: true
      schema:
        $ref: '#/components/schemas/custom_identifier'
    group_id:
      name: group_id
      in: path
      description: The name of the group
      required: true
      schema:
        $ref: '#/components/schemas/custom_identifier'
    action:
      name: action
      in: query
      required: true
      schema:
        type: string
        enum: [add, remove]
    status:
      name: status
      in: query
      required: true
      schema:
        type: string
        enum: ['enabled', 'disabled']
    next_token:
      name: next_token
      in: query
      required: false
      schema:
        type: string
    per_page:
      name: per_page
      in: query
      required: false
      schema:
        type: integer
        minimum: 5
        maximum: 30
        default: 15
  schemas:
    paged_results:
      type: array
      items:
        type: string
    custom_identifier:
      description: used to identify users, groups, and roles.
      type: string
      minLength: 1
      maxLength: 128
      pattern: '^[0-9a-zA-Z.@_\-$,=]*$'
    User:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/custom_identifier'
        status:
          type: string
        policy:
          type: string
          nullable: true
    Group:
      type: object
      properties:
        group_id:
          $ref: '#/components/schemas/custom_identifier'
        policy:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/custom_identifier'
        users:
          type: array
          items:
            $ref: '#/components/schemas/custom_identifier'
    Role:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/custom_identifier'
        policy:
          type: string
  responses:
    206:
      description: A single page of results was retrieved.
      headers:
        Link:
          description: URL to retrieve the next page of results.
          schema:
            type: string
    401:
      description: The users credentials failed to authenticate.
    403:
      description: The user is not authorized because they do not have adequate permission to perform the action.
    404:
      description: Resource not found.
    409:
      description: The object already exists.
  securitySchemes:
      BearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
        x-bearerInfoFunc: fusillade.utils.security.verify_jwt
